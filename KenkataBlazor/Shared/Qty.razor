@inject ICartService CartService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage




        <div class="row qty" style="width: 120px; height: 40px;">
            <button style="border-radius: 10px 0px 0px 10px;" @onclick="Dec" class="quantity-btn">-</button>

            <input type="number" class="quantity-input p-0" value=@QtyByUser min="0" />

            <button style="border-radius: 0px 10px 10px 0px;" @onclick="@(() => {Inc(); ChangeValue.InvokeAsync(subTotal);})" class="quantity-btn">+</button>
        </div>
   


@code {
    [Parameter]
    public decimal Price { get; set; }

    [Parameter]
    public string ProductName { get; set; }
    [Parameter]
    public int QtyByUser { get; set; }
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public string priceDeci { get; set; }
    [Parameter]
    public string subTotalDeci { get; set; }
    [Parameter]
    public EventCallback<decimal> ChangeValue { get; set; }


    private decimal subTotal { get; set; }
    //private string priceDeci { get; set; }
    //public string subTotalDeci { get; set; }
    private List<ShoppingCartModel> cart { get; set; }



    protected override async Task OnInitializedAsync()
    {
        //cart = await LocalStorage.GetItemAsync<List<ShoppingCartModel>>("cart");
        CalculateSubTotal();
        TwoDecimal();
        cart = await LocalStorage.GetItemAsync<List<ShoppingCartModel>>("cart");
        cart.Find(c => c.ProductId == ProductId).QuantityByUser = QtyByUser;

    }

    private void TwoDecimal()
    {
        priceDeci = string.Format("{0:0.00}", Price);
        subTotalDeci = string.Format("{0:0.00}", subTotal);
    }

    private async Task Inc()
    {
        QtyByUser = QtyByUser + 1;
        subTotal = QtyByUser * Price;
        TwoDecimal();
        cart = await LocalStorage.GetItemAsync<List<ShoppingCartModel>>("cart");
        cart.Find(c => c.ProductId == ProductId).QuantityByUser = QtyByUser;
        await LocalStorage.SetItemAsync("cart", cart);
        CartService.UpdateComponents();

    }
    private async Task Dec()
    {
        if (QtyByUser > 0)
            QtyByUser = QtyByUser - 1;

        subTotal = QtyByUser * Price;
        TwoDecimal();
        cart = await LocalStorage.GetItemAsync<List<ShoppingCartModel>>("cart");
        cart.Find(c => c.ProductId == ProductId).QuantityByUser = QtyByUser;
        await LocalStorage.SetItemAsync("cart", cart);
        CartService.UpdateComponents();
    }

    private void CalculateSubTotal()
    {
        subTotal = QtyByUser * Price;
    }


}
